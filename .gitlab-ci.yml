# This CI/CD pipeline consists of two different stages: build, test.
# The pipeline uses echo commands to simulate the pipeline execution.
image: node:latest

stages: # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

lint-test-job:
  stage: test # It can run at the same time as unit-test-job (in parallel).
  before_script:
    - npm i
  script:
    - echo "Linting code... This will take about 10 seconds."
    - npm run lint
    - echo "Lint check is completed."
  tags:
    - hva

sonarqube-check:
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
    - if: $CI_COMMIT_BRANCH == 'production'
  tags:
    - hva

build:
  stage: build
  image: docker:20.10.16
  before_script:
    - echo $DOCKER_ACCESS_TOKEN | docker login -u $DOCKER_REGISTRY_USER --password-stdin
  script:
    - echo $ENV_FILE
    # File is outside of build context, so make local copy.
    - cp ${ENV_FILE} .env
    - docker build -f .docker/Dockerfile -t $DOCKER_REPO:v-0.1 .
    - docker push $DOCKER_REPO:v-0.1
    - cd python
    - docker build -f .docker/Dockerfile -t $DOCKER_REPO_BACKEND:v-0.1 .
    - docker push $DOCKER_REPO_BACKEND:v-0.1
  rules:
    - if: $CI_COMMIT_BRANCH == 'production'
  tags:
    - hva

build-staging:
  stage: build
  image: docker:20.10.16
  before_script:
    - echo $DOCKER_ACCESS_TOKEN | docker login -u $DOCKER_REGISTRY_USER --password-stdin
  script:
    - echo $ENV_FILE
    # File is outside of build context, so make local copy.
    - cp ${ENV_FILE} .env
    - docker build -f .docker/Dockerfile -t $DOCKER_REPO_STAGING:v-0.1 .
    - docker push $DOCKER_REPO_STAGING:v-0.1
    - cd python
    - docker build -f .docker/Dockerfile -t $DOCKER_REPO_BACKEND_STAGING:v-0.1 .
    - docker push $DOCKER_REPO_BACKEND_STAGING:v-0.1
  rules:
    - if: $CI_COMMIT_BRANCH == 'staging'
  tags:
    - hva

deploy:
  stage: deploy
  before_script:
    #checks if ssh-key is valid from this pipeline if yes assign rights so it can ssh into our production server
    - "command -v ssh-agent >/dev/null || ( apk add --update openssh )"
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $SERVER_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo $SSH_USER@$SERVER_IP
    - ssh $SSH_USER@$SERVER_IP "
      echo $DOCKER_ACCESS_TOKEN | docker login -u $DOCKER_REGISTRY_USER --password-stdin &&
      cd ouijatv &&
      docker compose pull &&
      docker compose up -d &&
      docker image prune -a -f &&
      docker container prune -f"
  rules:
    - if: $CI_COMMIT_BRANCH == 'production'
  tags:
    - hva

deploy-staging:
  stage: deploy
  before_script:
    #checks if ssh-key is valid from this pipeline if yes assign rights so it can ssh into our production server
    - "command -v ssh-agent >/dev/null || ( apk add --update openssh )"
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY_STAGING}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $SERVER_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo $SSH_USER_STAGING@$SERVER_IP
    - ssh $SSH_USER_STAGING@$SERVER_IP "
      echo $DOCKER_ACCESS_TOKEN | docker login -u $DOCKER_REGISTRY_USER --password-stdin &&
      cd ouijatv &&
      docker compose pull &&
      docker compose up -d &&
      docker image prune -a -f &&
      docker container prune -f"
  rules:
    - if: $CI_COMMIT_BRANCH == 'staging'
  tags:
    - hva
